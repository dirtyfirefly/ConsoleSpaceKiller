//****************************************************//
// dirty_firefly                                      //
//****************************************************//
// SpaceKiller                                        //
//                                                    //
// main + blocks_code                                 //
//----------------------------------------------------//
// alpha                                              //
//****************************************************//

#include <iostream>
#include <Windows.h>
#include "Field.h"
#include "Key.h"
#include <thread>
#include <mutex>
#include <ctime>

using namespace std;

//сделать заголовочный файл для глобальной переменной и констант
int f = -1;

//1-ый блок кода
//часть кода обрабатывающаяся в потоке
//работает с полем игры
void boom(Field& obj1, mutex& m)
{
	/*int i = 1;*/
	int count = 0;
	int ast1 = 0;

	srand((unsigned int)time(0));
	
	//одновремнное (почти) выполнение перемещения астеройдов и
	// вывод поля на экран
	//имеет синхонизация со 2-ым блоком
	while (true /*i < 31*/) //убрал i посмотреть как это 
							//отразится на коде
							//предположительно - никак
							//но зачем-то она была
	{
		ast1 = rand() % 30;
		m.lock();
		system("cls");
		//перемещение
		obj1.down();
		//частота появления астеройдов
		if (!(count++ % 5))
			//появление астеройда
			obj1.pos(ast1);
		//вывод на экран
		obj1.show();
		//проверка нажатия игрока на пробел
		if (f >= 0)
		{
			//отоброжение выстрела на поле в нужном месте
			obj1.insertArm(f);
			//обнуление выстрела
			f = -1;
		}
		m.unlock();
		//5 кадров в секунду
		Sleep(200);
	}
}

//2-ой блок
//часть кода обрабатывающаяся в потоке
//работает с перемещением рокеты и стрельбой
void rock(Key& r, mutex& m)
{
	while (true)
	{
		//не синхронизированная проверка нажатия клавишь
		f = r.check();
		//синхронизированное отоброжение в консоли
		m.lock();
		r.show();
		m.unlock();
		//5 кадров в секунду
		Sleep(200);
	}
}

int main(void)
{
	//сделать unicode
	system("cls");
	SetConsoleCP(1251);
	SetConsoleOutputCP(1251);

	Key key;		//создание управления ракетой
	Field field;	//создание поля
	mutex m;		//объект синхронизации

	//запуск болоков кода на выполнение
	thread t1(boom, ref(field), ref(m));
	thread t2(rock, ref(key), ref(m));
	
	//привязки потоков к main
	if (t1.joinable())
		t1.join();
	if (t2.joinable())
		t2.join();

	return 0;
}
